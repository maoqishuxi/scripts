package uids

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"time"
)

type AutoGenerated struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Data    []struct {
		ID         int       `json:"id"`
		ConfigUUID string    `json:"config_uuid"`
		ScreenName string    `json:"screen_name"`
		UID        string    `json:"uid"`
		Alias      string    `json:"alias"`
		Status     bool      `json:"status"`
		Notice     bool      `json:"notice"`
		CreatedAt  time.Time `json:"created_at"`
	} `json:"data"`
}

func Proxy() *http.Client {
	// 代理 URL
	// proxyURL, err := url.Parse("http://127.0.0.1:1080")
	// if err != nil {
	// 	log.Fatalf("Failed to parse proxy URL: %v", err)
	// }

	// 创建一个自定义的 HTTP 客户端，使用代理
	transport := &http.Transport{
		// Proxy: http.ProxyURL(proxyURL),
	}
	client := &http.Client{
		Transport: transport,
	}

	return client
}

func GetUids() *AutoGenerated {
	// url := "https://weibo.julai.fun/api/config?query=read"
	// configUrl := "https://weibo-nu.vercel.app/api/config"
	configUrl := "http://supabase.julai.fun:9000/api/config"

	// 创建HTTP请求
	req, err := http.NewRequest("GET", configUrl, nil)
	if err != nil {
		log.Fatalf("Failed to create HTTP request: %v", err)
	}

	// 发送HTTP请求
	resp, err := Proxy().Do(req)
	if err != nil {
		log.Printf("Failed to send HTTP request: %v", err)
		return nil
	}
	defer resp.Body.Close()

	// 读取响应体
	data, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf("Failed to read response body: %v", err)
		return nil
	}

	// 解析JSON数据
	var uids AutoGenerated
	if err := json.Unmarshal(data, &uids); err != nil {
		log.Printf("Failed to unmarshal JSON response: %v", err)
		return nil
	}

	return &uids
}
